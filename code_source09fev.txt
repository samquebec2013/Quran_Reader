Fichier: app/src/main\AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Quran_Athman_Reader"
        tools:targetApi="31">
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

Fichier: app/src/main\java\com\example\quran_athman_reader\BookmarkFragment.kt
package com.example.quran_athman_reader

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import androidx.fragment.app.DialogFragment

class BookmarkFragment : DialogFragment() {

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        val view = inflater.inflate(R.layout.fragment_bookmark, container, false)

        val closeButton: Button = view.findViewById(R.id.closeButton)
        closeButton.setOnClickListener { dismiss() }

        return view
    }
}

Fichier: app/src/main\java\com\example\quran_athman_reader\ButtonActions.kt
package com.example.quran_athman_reader

import android.content.Intent
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity

object  ButtonActions {

    fun openChapters(view: View) {
        Toast.makeText(view.context, "Chapitres affich√©s", Toast.LENGTH_SHORT).show()
        val activity = view.context as? AppCompatActivity
        activity?.let {
            ChaptersFragment().show(it.supportFragmentManager, "chaptersFragment")
        }
    }

    fun savePage(view: View) {
        Toast.makeText(view.context, "Page enregistr√©e", Toast.LENGTH_SHORT).show()
        val activity = view.context as? AppCompatActivity
        activity?.let {
            BookmarkFragment().show(it.supportFragmentManager, "bookmarkFragment")
        }
    }

    fun shareApp(view: View) {
        val context = view.context
        val intent = Intent(Intent.ACTION_SEND).apply {
            type = "text/plain"
            putExtra(Intent.EXTRA_TEXT, " D'oeuvre cette application de lecture de livres !")
        }
        context.startActivity(Intent.createChooser(intent, "Partager via"))
    }

    fun openBookmark(view: View) {
        Toast.makeText(view.context, "Ouverture du marque-page", Toast.LENGTH_SHORT).show()
        val activity = view.context as? AppCompatActivity
        activity?.let {
            BookmarkFragment().show(it.supportFragmentManager, "bookmarkFragment")
        }
    }

    fun openSettings(view: View) {
        Toast.makeText(view.context, "Ouverture des param√®tres", Toast.LENGTH_SHORT).show()
        val activity = view.context as? AppCompatActivity
        activity?.let {
            SettingsFragment().show(it.supportFragmentManager, "settingsFragment")
        }
    }
}

Fichier: app/src/main\java\com\example\quran_athman_reader\Category_Adapter.kt
package com.example.quran_athman_reader

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView

class CategoryAdapter(
    private val categories: List<Category>,
    private val onItemSelected: (String) -> Unit // Pass the page number as a String
) : RecyclerView.Adapter<CategoryAdapter.CategoryViewHolder>() {

    inner class CategoryViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val categoryTitle: TextView = view.findViewById(R.id.categoryTitle)
        val subcategoriesRecyclerView: RecyclerView = view.findViewById(R.id.recyclerViewSubcategories)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CategoryViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_category, parent, false)
        return CategoryViewHolder(view)
    }

    override fun onBindViewHolder(holder: CategoryViewHolder, position: Int) {
        val category = categories[position]

        // Set the category title
        holder.categoryTitle.text = category.title

        // Toggle visibility of subcategories when the category title is clicked
        holder.categoryTitle.setOnClickListener {
            holder.subcategoriesRecyclerView.visibility =
                if (holder.subcategoriesRecyclerView.visibility == View.VISIBLE) View.GONE else View.VISIBLE
        }

        // Set up the RecyclerView for subcategories with a GridLayoutManager (3 columns)
        holder.subcategoriesRecyclerView.layoutManager = GridLayoutManager(holder.itemView.context, 3)
        holder.subcategoriesRecyclerView.adapter = SubcategoryAdapter(category.subcategories) { selectedItem ->
            // Pass the page number (as a String) to the listener
            onItemSelected(selectedItem.page)
        }
    }

    override fun getItemCount(): Int = categories.size
}

Fichier: app/src/main\java\com\example\quran_athman_reader\ChaptersFragment.kt
package com.example.quran_athman_reader

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import androidx.fragment.app.DialogFragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView

class ChaptersFragment : DialogFragment() {

    private var onPageSelected: ((String) -> Unit)? = null

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        val view = inflater.inflate(R.layout.fragment_chapters, container, false)

        // Use the filtered data from Data.kt
        val recyclerView: RecyclerView = view.findViewById(R.id.chapterRecyclerView)
        recyclerView.layoutManager = LinearLayoutManager(requireContext())
        recyclerView.adapter = CategoryAdapter(chapters) { page ->
            // Pass the selected page number back to the activity
            onPageSelected?.invoke(page)
            dismiss()
        }

        // Close button
        val closeButton: Button = view.findViewById(R.id.closeButton)
        closeButton.setOnClickListener { dismiss() }

        return view
    }

    fun setOnPageSelectedListener(listener: (String) -> Unit) {
        onPageSelected = listener
    }
}

Fichier: app/src/main\java\com\example\quran_athman_reader\Data.kt
package com.example.quran_athman_reader

// Data classes
data class Category(
    val title: String,
    val subcategories: List<Subcategory> = emptyList()
)

data class Subcategory(
    val name: String,
    val page: String
)

// Filtered Data
val chapters = listOf(
    Category("üìñ Sourat", listOf(
        Subcategory("ÿßŸÑŸÅÿßÿ™ÿ≠ÿ©", "2"),
  Subcategory("ÿßŸÑÿ•ÿÆŸÑÿßÿµ", "486"),
        Subcategory("ÿßŸÑŸÅŸÑŸÇ", "486"),
        Subcategory("ÿßŸÑŸÜÿßÿ≥", "486")
    )),
    Category("üìö Hizb", listOf(
        Subcategory("ÿ≠ÿ≤ÿ® 1", "3"),
        Subcategory("ÿ≠ÿ≤ÿ® 2", "12"),
 ,
        Subcategory("ÿ¨ÿ≤ÿ° 29", "452"),
        Subcategory("ÿ¨ÿ≤ÿ° 30", "468")
    )),
    Category("‚≠ê Souar et Ayat-fadila", listOf(
        Subcategory("ÿ¢Ÿäÿ© ÿßŸÑŸÉÿ±ÿ≥Ÿä", "490"),
        Subcategory("ÿ≥Ÿàÿ±ÿ© ÿßŸÑŸÅÿßÿ™ÿ≠ÿ©", "491"),
        Subcategory("ÿ≥Ÿàÿ±ÿ© ÿßŸÑÿ•ÿÆŸÑÿßÿµ", "492")
    )),
    Category("ü§≤ Douaa", listOf(
        Subcategory("ÿØÿπÿßÿ° ÿßŸÑÿµÿ®ÿßÿ≠", "545"),
        Subcategory("ÿØÿπÿßÿ° ÿßŸÑŸÖÿ≥ÿßÿ°", "546"),
        Subcategory("ÿØÿπÿßÿ° ŸÇÿ®ŸÑ ÿßŸÑŸÜŸàŸÖ", "547")
    ))
)

Fichier: app/src/main\java\com\example\quran_athman_reader\ImageAdapter.kt
package com.example.quran_athman_reader

import android.app.Activity
import android.content.Context
import android.graphics.BitmapFactory
import android.graphics.Point
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import androidx.viewpager.widget.PagerAdapter
import java.io.IOException

class ImageAdapter(private val context: Context, private val imagePaths: List<String>) : PagerAdapter() {

    var isNightMode: Boolean = false
    private val screenWidth: Int
    private val screenHeight: Int

    init {
        val display = (context as Activity).windowManager.defaultDisplay
        val size = Point()
        display.getSize(size)
        screenWidth = size.x
        screenHeight = size.y
    }

    override fun getCount(): Int = imagePaths.size

    override fun isViewFromObject(view: View, `object`: Any): Boolean = view == `object`

    override fun instantiateItem(container: ViewGroup, position: Int): Any {
        val inflater = LayoutInflater.from(context)
        val view = inflater.inflate(R.layout.item_image, container, false)
        val imageView: ImageView = view.findViewById(R.id.imageView)

        val imagePath = imagePaths[position] // Example: "mobile/page1.jpg"
        try {
            val inputStream = context.assets.open(imagePath)
            val bitmap = BitmapFactory.decodeStream(inputStream)
            imageView.setImageBitmap(bitmap)
            inputStream.close()
        } catch (e: IOException) {
            e.printStackTrace()
        }

        imageView.layoutParams.width = screenWidth
        imageView.layoutParams.height = screenHeight
        imageView.scaleType = ImageView.ScaleType.FIT_CENTER

        if (isNightMode) applyNightMode(imageView)

        container.addView(view)
        return view
    }

    override fun destroyItem(container: ViewGroup, position: Int, `object`: Any) {
        container.removeView(`object` as View)
    }

    private fun applyNightMode(imageView: ImageView) {
        val matrix = android.graphics.ColorMatrix()
        matrix.set(
            floatArrayOf(
                -1f,  0f,  0f,  0f, 255f,
                0f, -1f,  0f,  0f, 255f,
                0f,  0f, -1f,  0f, 255f,
                0f,  0f,  0f,  1f,   0f
            )
        )
        imageView.colorFilter = android.graphics.ColorMatrixColorFilter(matrix)
    }
    fun toggleNightMode(isEnabled: Boolean) {
        isNightMode = isEnabled
        notifyDataSetChanged() // Refresh all visible items
    }
    override fun getItemPosition(`object`: Any): Int {
        return POSITION_NONE // Force ViewPager to recreate all views
    }
}

Fichier: app/src/main\java\com\example\quran_athman_reader\MainActivity.kt
package com.example.quran_athman_reader

import android.app.Dialog
import android.content.SharedPreferences
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.GestureDetector
import android.view.MotionEvent
import android.view.View
import android.view.WindowManager
import android.widget.Button
import android.widget.EditText
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.viewpager.widget.ViewPager
import org.json.JSONObject

class MainActivity : AppCompatActivity(), SettingsFragment.SettingsChangeListener {

    private lateinit var viewPager: ViewPager
    private lateinit var menuLayout: LinearLayout
    private lateinit var closeButton: ImageView
    private lateinit var openChaptersButton: ImageView
    private lateinit var savePageButton: ImageView
    private lateinit var shareAppButton: ImageView
    private lateinit var openBookmarkButton: ImageView
    private lateinit var openSettingsButton: ImageView
    private lateinit var pageTitle: TextView
    private lateinit var homeButton: ImageView // New Home Button
    private lateinit var sharedPreferences: SharedPreferences

    private val savedPages = mutableListOf<Int>()
    private val totalPages = 486
    private val imageList = (1..totalPages).map { "quran/page$it.jpg" }
    private val titleMap = mutableMapOf<Int, String>()

    private lateinit var adapter: ImageAdapter
    private var isNightMode = false
    private var isRtl = true  // Default scrolling direction (RTL)

    // Auto-hide UI handler
    private val hideUiHandler = Handler(Looper.getMainLooper())
    private val hideUiRunnable = Runnable { hideUI() }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        window.decorView.systemUiVisibility = (
                View.SYSTEM_UI_FLAG_FULLSCREEN or
                        View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or
                        View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                )
        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)

        viewPager = findViewById(R.id.viewPager)
        menuLayout = findViewById(R.id.menuLayout)
        closeButton = findViewById(R.id.closeButton)
        openChaptersButton = findViewById(R.id.openChapters)
        savePageButton = findViewById(R.id.savePage)
        shareAppButton = findViewById(R.id.shareApp)
        openBookmarkButton = findViewById(R.id.openBookmark)
        openSettingsButton = findViewById(R.id.openSettings)
        pageTitle = findViewById(R.id.pageTitle)
        homeButton = findViewById(R.id.homeButton) // Initialize Home Button
        sharedPreferences = getSharedPreferences("AppSettings", MODE_PRIVATE)
        isNightMode = sharedPreferences.getBoolean("NightMode", false)
        isRtl = sharedPreferences.getBoolean("ScrollDirectionRTL", true) // Load scroll direction
        loadTitles()
        loadSavedPages()

        adapter = ImageAdapter(this, imageList)
        adapter.isNightMode = isNightMode

        // Night Mode Change Listener
        fun onNightModeChanged(isEnabled: Boolean) {
            isNightMode = isEnabled
            adapter.toggleNightMode(isEnabled) // Notify adapter of night mode change
            sharedPreferences.edit().putBoolean("NightMode", isEnabled).apply()

            // Recreate the activity to apply changes immediately
            recreate()
        }

        viewPager.adapter = adapter
        viewPager.offscreenPageLimit = 3
        setScrollDirection()

        closeButton.visibility = View.GONE
        menuLayout.visibility = View.GONE
        pageTitle.visibility = View.GONE // Hide title at startup
        homeButton.visibility = View.GONE // Hide home button at startup

        closeButton.setOnClickListener { finish() }
        homeButton.setOnClickListener {
            showHomeDialog() // Show the Home Dialog when the home button is clicked
        }
        openSettingsButton.setOnClickListener {
            SettingsFragment().show(supportFragmentManager, "SettingsFragment")
        }
        savePageButton.setOnClickListener { saveCurrentPage() }
        openBookmarkButton.setOnClickListener { showSavedPagesDialog() }
        openChaptersButton.setOnClickListener {
            val chaptersFragment = ChaptersFragment()
            chaptersFragment.setOnPageSelectedListener { page ->
                navigateToPage(page)
            }
            chaptersFragment.show(supportFragmentManager, "chaptersFragment")
        }
        shareAppButton.setOnClickListener { ButtonActions.shareApp(it) }

        val gestureDetector = GestureDetector(this, object : GestureDetector.SimpleOnGestureListener() {
            override fun onSingleTapConfirmed(e: MotionEvent): Boolean {
                toggleUI()
                return true
            }
        })

        viewPager.setOnTouchListener { _, event -> gestureDetector.onTouchEvent(event) }

        viewPager.addOnPageChangeListener(object : ViewPager.OnPageChangeListener {
            override fun onPageScrolled(position: Int, positionOffset: Float, positionOffsetPixels: Int) {}
            override fun onPageSelected(position: Int) {
                updateTitle(position + 1)
            }
            override fun onPageScrollStateChanged(state: Int) {}
        })

        hideUiHandler.postDelayed(hideUiRunnable, 5000) // Auto-hide UI after 5 seconds
    }

    private fun loadTitles() {
        try {
            val inputStream = resources.openRawResource(R.raw.title)
            val jsonString = inputStream.bufferedReader().use { it.readText() }
            val jsonObject = JSONObject(jsonString)
            for (key in jsonObject.keys()) {
                titleMap[key.toInt()] = jsonObject.getString(key)
            }
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    private fun updateTitle(pageNumber: Int) {
        val title = titleMap[pageNumber] ?: "Page $pageNumber"
        pageTitle.text = title
    }

    private fun loadSavedPages() {
        sharedPreferences.getString("savedPages", "")?.let {
            savedPages.clear()
            savedPages.addAll(it.split(",").mapNotNull { it.toIntOrNull() })
        }
    }

    private fun saveCurrentPage() {
        val currentPage = viewPager.currentItem + 1
        if (!savedPages.contains(currentPage)) {
            savedPages.add(currentPage)
            savePages()
            Toast.makeText(this, "Page $currentPage enregistr√©e", Toast.LENGTH_SHORT).show()
        }
    }

    private fun savePages() {
        sharedPreferences.edit().putString("savedPages", savedPages.joinToString(",")).apply()
    }

    private fun showSavedPagesDialog() {
        if (savedPages.isEmpty()) {
            Toast.makeText(this, "Aucune page enregistr√©e", Toast.LENGTH_SHORT).show()
            return
        }
        SavedPagesDialog(savedPages.toMutableList(), ::removeSavedPage) { page ->
            viewPager.currentItem = page - 1
        }.show(supportFragmentManager, "SavedPagesDialog")
    }

    private fun removeSavedPage(page: Int) {
        savedPages.remove(page)
        savePages()
    }

    private fun navigateToPage(page: String) {
        val pageNumber = page.toIntOrNull() ?: return
        if (pageNumber in 1..totalPages) {
            viewPager.currentItem = pageNumber - 1
        }
    }

    private fun toggleUI() {
        if (closeButton.visibility == View.VISIBLE) {
            hideUI()
        } else {
            showUI()
        }
    }

    private fun showUI() {
        closeButton.visibility = View.VISIBLE
        menuLayout.visibility = View.VISIBLE
        pageTitle.visibility = View.VISIBLE
        homeButton.visibility = View.VISIBLE // Show home button
        hideUiHandler.removeCallbacks(hideUiRunnable)
        hideUiHandler.postDelayed(hideUiRunnable, 5000)
    }

    private fun hideUI() {
        closeButton.visibility = View.GONE
        menuLayout.visibility = View.GONE
        pageTitle.visibility = View.GONE
        homeButton.visibility = View.GONE // Hide home button
    }

    private fun setScrollDirection() {
        viewPager.layoutDirection = if (isRtl) View.LAYOUT_DIRECTION_RTL else View.LAYOUT_DIRECTION_LTR
    }

    override fun onNightModeChanged(isEnabled: Boolean) {
        isNightMode = isEnabled
        adapter.isNightMode = isNightMode
        adapter.notifyDataSetChanged()
        sharedPreferences.edit().putBoolean("NightMode", isNightMode).apply()
    }

    override fun onScrollDirectionChanged(isRtlEnabled: Boolean) {
        isRtl = isRtlEnabled
        sharedPreferences.edit().putBoolean("ScrollDirectionRTL", isRtl).apply()
        setScrollDirection()
    }

    // Show the Home Dialog
    private fun showHomeDialog() {
        val dialog = Dialog(this)
        dialog.setContentView(R.layout.dialog_home)

        // Bind views
        val searchInput = dialog.findViewById<EditText>(R.id.searchInput)
        val searchButton = dialog.findViewById<Button>(R.id.searchButton)
        val tafsirButton = dialog.findViewById<Button>(R.id.tafsirButton)
        val closeDialogButton = dialog.findViewById<Button>(R.id.closeDialogButton)

        // Handle Search Button
        searchButton.setOnClickListener {
            val query = searchInput.text.toString().trim()
            if (query.isNotEmpty()) {
                performSearch(query)
            } else {
                Toast.makeText(this, "Veuillez entrer une requ√™te de recherche", Toast.LENGTH_SHORT).show()
            }
        }

        // Handle Tafsir Button
        tafsirButton.setOnClickListener {
            openTafsirWindow()
        }

        // Handle Close Button
        closeDialogButton.setOnClickListener {
            dialog.dismiss()
        }

        // Show the dialog
        dialog.show()
    }

    // Perform Search Logic
    private fun performSearch(query: String) {
        // Example: Navigate to a specific page based on the query
        Toast.makeText(this, "Recherche pour: $query", Toast.LENGTH_SHORT).show()
        // You can implement more advanced search logic here
    }

    // Open Tafsir Window
    private fun openTafsirWindow() {
        Toast.makeText(this, "Ouverture du Tafsir...", Toast.LENGTH_SHORT).show()
        // Implement Tafsir functionality here
    }
}
Fichier: app/src/main\java\com\example\quran_athman_reader\SavedPagesAdapter.kt
package com.example.quran_athman_reader

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView

class SavedPagesAdapter(
    private val savedPages: MutableList<Int>,
    private val onPageSelected: (Int) -> Unit,
    private val onRemovePage: (Int) -> Unit
) : RecyclerView.Adapter<SavedPagesAdapter.SavedPageViewHolder>() {

    class SavedPageViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val pageText: TextView = view.findViewById(R.id.pageNumber)
        val removeButton: Button = view.findViewById(R.id.removePageButton)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SavedPageViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_saved_page, parent, false)
        return SavedPageViewHolder(view)
    }

    override fun onBindViewHolder(holder: SavedPageViewHolder, position: Int) {
        val page = savedPages[position]

        holder.pageText.text = "Page $page"
        holder.pageText.setOnClickListener {
            onPageSelected(page)
        }

        holder.removeButton.setOnClickListener {
            onRemovePage(page)
            savedPages.removeAt(position)
            notifyItemRemoved(position)
            notifyItemRangeChanged(position, savedPages.size)
        }
    }

    override fun getItemCount(): Int = savedPages.size
}

Fichier: app/src/main\java\com\example\quran_athman_reader\SavedPagesDialog.kt
package com.example.quran_athman_reader

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.Toast
import androidx.fragment.app.DialogFragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView

class SavedPagesDialog(
    private val savedPages: MutableList<Int>,
    private val onRemovePage: (Int) -> Unit,
    private val onPageSelected: (Int) -> Unit
) : DialogFragment() {

    private lateinit var adapter: SavedPagesAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.dialog_saved_pages, container, false)
        val recyclerView: RecyclerView = view.findViewById(R.id.recyclerViewPages)
        val closeButton: Button = view.findViewById(R.id.closeButton)

        // Initialize Adapter
        adapter = SavedPagesAdapter(savedPages, onPageSelected, onRemovePage)
        recyclerView.layoutManager = LinearLayoutManager(requireContext())
        recyclerView.adapter = adapter

        if (savedPages.isEmpty()) {
            Toast.makeText(requireContext(), "Aucune page enregistr√©e", Toast.LENGTH_SHORT).show()
            dismiss()
        }

        closeButton.setOnClickListener { dismiss() }
        return view
    }
}

Fichier: app/src/main\java\com\example\quran_athman_reader\SettingsFragment.kt
package com.example.quran_athman_reader

import android.content.Context
import android.content.SharedPreferences
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.Switch
import androidx.fragment.app.DialogFragment

class SettingsFragment : DialogFragment() {

    private lateinit var sharedPreferences: SharedPreferences
    private lateinit var nightModeSwitch: Switch
    private lateinit var scrollDirectionSwitch: Switch
    private lateinit var resetButton: Button
    private var listener: SettingsChangeListener? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_settings, container, false)

        sharedPreferences = requireActivity().getSharedPreferences("AppSettings", Context.MODE_PRIVATE)

        nightModeSwitch = view.findViewById(R.id.nightModeSwitch)
        scrollDirectionSwitch = view.findViewById(R.id.scrollDirectionSwitch)
        resetButton = view.findViewById(R.id.resetButton)
        val closeButton: Button = view.findViewById(R.id.closeButton)

        val isNightMode = sharedPreferences.getBoolean("NightMode", false)
        val isRtl = sharedPreferences.getBoolean("ScrollDirectionRTL", true)

        nightModeSwitch.isChecked = isNightMode
        scrollDirectionSwitch.isChecked = isRtl

        nightModeSwitch.setOnCheckedChangeListener { _, isChecked ->
            sharedPreferences.edit().putBoolean("NightMode", isChecked).apply()
            listener?.onNightModeChanged(isChecked)
        }

        scrollDirectionSwitch.setOnCheckedChangeListener { _, isChecked ->
            sharedPreferences.edit().putBoolean("ScrollDirectionRTL", isChecked).apply()
            listener?.onScrollDirectionChanged(isChecked)
        }

        resetButton.setOnClickListener {
            resetSettings()
        }

        closeButton.setOnClickListener { dismiss() }

        return view
    }

    private fun resetSettings() {
        sharedPreferences.edit().putBoolean("NightMode", false)
            .putBoolean("ScrollDirectionRTL", true)
            .apply()

        nightModeSwitch.isChecked = false
        scrollDirectionSwitch.isChecked = true

        listener?.onNightModeChanged(false)
        listener?.onScrollDirectionChanged(true)
    }

    override fun onAttach(context: Context) {
        super.onAttach(context)
        if (context is SettingsChangeListener) {
            listener = context
        }
    }

    override fun onDetach() {
        super.onDetach()
        listener = null
    }

    interface SettingsChangeListener {
        fun onNightModeChanged(isEnabled: Boolean)
        fun onScrollDirectionChanged(isRtlEnabled: Boolean)
    }
}

Fichier: app/src/main\java\com\example\quran_athman_reader\Subcategory_Adapter.kt
package com.example.quran_athman_reader

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView

class SubcategoryAdapter(
    private val subcategories: List<Subcategory>,  // Changed from List<String> to List<Subcategory>
    private val onItemSelected: (Subcategory) -> Unit  // Changed from (String) to (Subcategory)
) : RecyclerView.Adapter<SubcategoryAdapter.SubcategoryViewHolder>() {

    inner class SubcategoryViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val subcategoryText: TextView = view.findViewById(R.id.subcategoryText) // ‚úÖ Verified
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): SubcategoryViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_subcategory, parent, false)
        return SubcategoryViewHolder(view)
    }

    override fun onBindViewHolder(holder: SubcategoryViewHolder, position: Int) {
        val subcategory = subcategories[position]
        holder.subcategoryText.text = subcategory.name  // Use subcategory.name instead of just subcategory
        holder.subcategoryText.setOnClickListener {
            onItemSelected(subcategory)  // Pass the entire Subcategory object
        }
    }

    override fun getItemCount(): Int = subcategories.size
}

Fichier: app/src/main\java\com\example\quran_athman_reader\ZoomableImageView.kt
package com.example.quran_athman_reader

import android.content.Context
import android.graphics.Matrix
import android.graphics.PointF
import android.graphics.drawable.Drawable
import android.util.AttributeSet
import android.view.MotionEvent
import android.view.ScaleGestureDetector
import androidx.appcompat.widget.AppCompatImageView
import kotlin.math.max
import kotlin.math.min

class ZoomableImageView @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null
) : AppCompatImageView(context, attrs) {

    private val scaleDetector: ScaleGestureDetector
    private val matrix = Matrix()
    private var scaleFactor = 1f
    private var mode = NONE

    private var lastTouchX = 0f
    private var lastTouchY = 0f
    private var activePointerId = -1

    private var isPortraitMode = true

    companion object {
        private const val NONE = 0
        private const val DRAG = 1
        private const val ZOOM = 2
    }

    init {
        scaleType = ScaleType.MATRIX
        scaleDetector = ScaleGestureDetector(context, ScaleListener())
    }

    override fun onTouchEvent(event: MotionEvent): Boolean {
        scaleDetector.onTouchEvent(event)

        when (event.action and MotionEvent.ACTION_MASK) {
            MotionEvent.ACTION_DOWN -> {
                mode = DRAG
                lastTouchX = event.x
                lastTouchY = event.y
            }
            MotionEvent.ACTION_POINTER_DOWN -> {
                mode = ZOOM
            }
            MotionEvent.ACTION_MOVE -> {
                if (mode == DRAG) {
                    val dx = event.x - lastTouchX
                    val dy = event.y - lastTouchY
                    matrix.postTranslate(dx, dy)
                    lastTouchX = event.x
                    lastTouchY = event.y
                    setImageMatrix(matrix)
                }
            }
            MotionEvent.ACTION_UP, MotionEvent.ACTION_POINTER_UP -> {
                mode = NONE
            }
        }
        return true
    }

    private inner class ScaleListener : ScaleGestureDetector.SimpleOnScaleGestureListener() {
        override fun onScale(detector: ScaleGestureDetector): Boolean {
            scaleFactor *= detector.scaleFactor
            scaleFactor = max(1f, min(scaleFactor, 3f)) // Limit zoom between 1x and 3x

            // Restrict scaling based on orientation
            if (isPortraitMode) {
                scaleFactor = min(scaleFactor, height.toFloat() / drawable.intrinsicHeight)
            } else {
                scaleFactor = min(scaleFactor, width.toFloat() / drawable.intrinsicWidth)
            }

            matrix.setScale(scaleFactor, scaleFactor, detector.focusX, detector.focusY)
            setImageMatrix(matrix)
            return true
        }
    }

    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {
        super.onSizeChanged(w, h, oldw, oldh)
        isPortraitMode = w < h // Determine orientation based on width and height
    }

    override fun setImageDrawable(drawable: Drawable?) {
        super.setImageDrawable(drawable)
        resetZoom()
    }

    private fun resetZoom() {
        matrix.reset()
        scaleFactor = 1f
        setImageMatrix(matrix)
    }
}
Fichier: app/src/main\res\drawable\close_button_background.xml
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="oval">

    <solid android:color="@android:color/white"/>
    <stroke
        android:width="2dp"

         android:color="#CC000000"/> <!-- Semi-transparent background -->
    <size
        android:width="50dp"
        android:height="50dp"/>
    <corners android:radius="25dp"/>
</shape>

Fichier: app/src/main\res\drawable\error_image.xml
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="#FF0000" />
    <corners android:radius="8dp" />
</shape>

Fichier: app/src/main\res\drawable\ic_launcher_background.xml
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>

Fichier: app/src/main\res\drawable\ic_launcher_foreground.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

Fichier: app/src/main\res\drawable\menu_background.xml
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <corners android:radius="20dp"/>
    <solid android:color="#CC000000"/> <!-- Semi-transparent background -->
    <padding android:left="16dp" android:top="8dp" android:right="16dp" android:bottom="8dp"/>
</shape>

Fichier: app/src/main\res\drawable\placeholder.xml
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="#CCCCCC" />
    <corners android:radius="8dp" />
</shape>

Fichier: app/src/main\res\drawable\transparent_black_background.xml
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="#80000000" /> <!-- Semi-transparent black -->
    <corners android:radius="16dp" />   <!-- Rounded corners -->
    <stroke android:width="1dp" android:color="#40FFFFFF" /> <!-- Optional: Light border -->
</shape>
Fichier: app/src/main\res\layout\activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background">

    <!-- ViewPager for displaying pages -->
    <!-- ViewPager for displaying pages -->
    <androidx.viewpager.widget.ViewPager
        android:id="@+id/viewPager"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:clipToPadding="false"
        android:clipChildren="false"
        android:overScrollMode="never"
        android:paddingStart="0dp"
        android:paddingEnd="0dp"/>

    <!-- Page Title -->
    <TextView
        android:id="@+id/pageTitle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="10dp"
        android:textSize="20sp"
        android:textStyle="bold"
        android:textColor="@android:color/white"
        android:visibility="gone"

        android:padding="8dp"/>

    <!-- Close Button -->
    <ImageView
        android:id="@+id/closeButton"
        android:layout_width="40dp"
        android:layout_height="40dp"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:visibility="gone"
        android:src="@drawable/ic_close"
        android:contentDescription="Fermer l'application"
        android:padding="8dp"
        android:background="@drawable/close_button_background"/>

    <!-- Home Button (Top-Left Corner) -->
    <ImageView
        android:id="@+id/homeButton"
        android:layout_width="45dp"
        android:layout_height="45dp"
        android:layout_alignParentTop="true"
        android:layout_alignParentStart="true"
        android:layout_marginStart="5dp"
        android:layout_marginTop="5dp"
        android:visibility="gone"
        android:src="@drawable/ic_home"
        android:contentDescription="Accueil"
        android:padding="8dp"
        android:background="@drawable/close_button_background"/>

    <!-- Bottom Menu Layout -->
    <LinearLayout
        android:id="@+id/menuLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:orientation="horizontal"
        android:visibility="gone"
        android:padding="12dp"
        android:background="@drawable/menu_background"
        android:elevation="8dp">

        <ImageView
            android:id="@+id/openChapters"
            android:layout_width="0dp"
            android:layout_height="40dp"
            android:layout_weight="1"
            android:src="@drawable/ic_chapters"
            android:contentDescription="Ouvrir les chapitres"
            android:gravity="center"/>

        <ImageView
            android:id="@+id/savePage"
            android:layout_width="0dp"
            android:layout_height="40dp"
            android:layout_weight="1"
            android:src="@drawable/ic_save"
            android:contentDescription="Enregistrer la page"
            android:gravity="center"/>

        <ImageView
            android:id="@+id/shareApp"
            android:layout_width="0dp"
            android:layout_height="40dp"
            android:layout_weight="1"
            android:src="@drawable/ic_share"
            android:contentDescription="Partager l'application"
            android:gravity="center"/>

        <ImageView
            android:id="@+id/openBookmark"
            android:layout_width="0dp"
            android:layout_height="40dp"
            android:layout_weight="1"
            android:src="@drawable/ic_bookmark"
            android:contentDescription="Ouvrir les marque-pages"
            android:gravity="center"/>

        <ImageView
            android:id="@+id/openSettings"
            android:layout_width="0dp"
            android:layout_height="40dp"
            android:layout_weight="1"
            android:src="@drawable/ic_settings"
            android:contentDescription="Ouvrir les param√®tres"
            android:gravity="center"/>
    </LinearLayout>
</RelativeLayout>
Fichier: app/src/main\res\layout\dialog_home.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="16dp"
    android:background="@android:color/white">

    <!-- Search Bar -->
    <EditText
        android:id="@+id/searchInput"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Rechercher une sourate ou un verset..."
        android:padding="8dp"
        android:background="@drawable/transparent_black_background"
        android:inputType="text"/>

    <!-- Search Button -->
    <Button
        android:id="@+id/searchButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Rechercher"
        android:backgroundTint="@android:color/holo_green_dark"
        android:textColor="@android:color/white"
        android:layout_marginTop="8dp"/>

    <!-- Tafsir Button -->
    <Button
        android:id="@+id/tafsirButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Ouvrir le Tafsir"
        android:backgroundTint="@android:color/holo_blue_dark"
        android:textColor="@android:color/white"
        android:layout_marginTop="8dp"/>

    <!-- Close Button -->
    <Button
        android:id="@+id/closeDialogButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Fermer"
        android:backgroundTint="@android:color/holo_red_dark"
        android:textColor="@android:color/white"
        android:layout_marginTop="8dp"/>
</LinearLayout>
Fichier: app/src/main\res\layout\dialog_saved_pages.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="6dp"
    android:background="@android:color/white">

    <!-- Titre -->
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="üìñ Saved Pages"
        android:textSize="20sp"
        android:textStyle="bold"
        android:gravity="center"
        android:paddingBottom="10dp"
        android:textColor="@android:color/black" />

    <!-- Ligne de s√©paration -->
    <View
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:background="@android:color/darker_gray"
        android:layout_marginBottom="8dp"/>
    <Button
        android:id="@+id/closeButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:gravity="center"
        android:text="‚ùå Close"
        android:backgroundTint="@android:color/holo_green_dark"
        android:textColor="@android:color/white"
        android:layout_marginTop="8dp"/>

    <!-- Liste des pages enregistr√©es avec RecyclerView -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerViewPages"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:nestedScrollingEnabled="false"
        android:overScrollMode="never"/>

    <!-- Bouton Fermer -->

</LinearLayout>

Fichier: app/src/main\res\layout\fragment_bookmark.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:background="@android:color/white"
    android:padding="16dp">

    <Button
        android:id="@+id/closeButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="‚ùå Fermer"/>
</LinearLayout>

Fichier: app/src/main\res\layout\fragment_chapters.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:background="@android:color/white"
    android:padding="16dp">
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="‚öô Index"
        android:textSize="18sp"
        android:textStyle="bold"
        android:gravity="center"
        android:paddingBottom="3dp"
        android:textColor="@android:color/black" />
    <!-- Divider -->
    <View
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:background="@android:color/darker_gray"
        android:layout_marginBottom="3dp"/>
    <!-- Close Button -->
    <Button
        android:id="@+id/closeButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="‚ùå Fermer"
        android:backgroundTint="@android:color/holo_green_dark"
        android:textColor="@android:color/white"
        android:layout_marginTop="8dp"/>

    <!-- RecyclerView for Categories -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/chapterRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:nestedScrollingEnabled="false"
        android:overScrollMode="never"/>


</LinearLayout>

Fichier: app/src/main\res\layout\fragment_settings.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:background="@android:color/white"
    android:padding="16dp">

    <!-- Title -->
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="‚öô Param√®tres"
        android:textSize="18sp"
        android:textStyle="bold"
        android:gravity="center"
        android:paddingBottom="8dp"
        android:textColor="@android:color/black" />

    <!-- Divider -->
    <View
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:background="@android:color/darker_gray"
        android:layout_marginBottom="8dp"/>

    <!-- Night Mode Switch -->
    <Switch
        android:id="@+id/nightModeSwitch"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:checked="false"
        android:text="Mode Nuit"
        android:textSize="15sp"
        android:textStyle="bold"
        android:visibility="visible" />

    <!-- Scrolling Direction Switch -->
    <View
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:layout_marginBottom="8dp"
        android:background="@android:color/darker_gray" />

    <Switch
        android:id="@+id/scrollDirectionSwitch"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="D√©filement RTL"
        android:textSize="15sp"
        android:checked="true"/>

    <!-- Divider -->

    <!-- Reset Button -->
    <View
        android:id="@+id/view"
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:layout_marginBottom="8dp"
        android:background="@android:color/darker_gray" />

    <Button
        android:id="@+id/resetButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:backgroundTint="@android:color/holo_red_dark"
        android:textColor="@android:color/white"
        android:layout_marginTop="8dp"
        android:text="R√©initialiser"/>

    <!-- Close Button -->
    <Button
        android:id="@+id/closeButton"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:backgroundTint="@android:color/holo_green_dark"
        android:textColor="@android:color/white"
        android:layout_marginTop="8dp"
        android:text="Fermer"/>

</LinearLayout>

Fichier: app/src/main\res\layout\item_category.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="10dp"
    android:background="@android:color/white">

    <TextView
        android:id="@+id/categoryTitle"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="18sp"
        android:textStyle="bold"
        android:padding="8dp"
        android:textColor="@android:color/black"/>

    <!-- RecyclerView for Subcategories -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerViewSubcategories"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:visibility="gone"
        android:nestedScrollingEnabled="false"
        android:overScrollMode="never"/>
</LinearLayout>

Fichier: app/src/main\res\layout\item_image.xml
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center">

    <ImageView
        android:id="@+id/imageView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:adjustViewBounds="true"
        android:scaleType="centerCrop"/>
</FrameLayout>

Fichier: app/src/main\res\layout\item_saved_page.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="6dp"
    app:cardCornerRadius="8dp"
    app:cardElevation="4dp"
    android:background="@android:color/white">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="12dp"
        android:gravity="center_vertical"
        android:background="@android:color/white">

        <!-- Page Number -->
        <TextView
            android:id="@+id/pageNumber"
            android:layout_width="0dp"
            android:layout_weight="1"
            android:layout_height="wrap_content"
            android:text="üìñ Page Number"
            android:textSize="16sp"
            android:textColor="@android:color/black"
            android:clickable="true"
            android:foreground="?attr/selectableItemBackground"
            android:padding="8dp" />

        <!-- Remove Button -->
        <Button
            android:id="@+id/removePageButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="‚ùå"
            android:backgroundTint="@android:color/holo_green_dark"
            android:textColor="@android:color/white"
            android:elevation="4dp"
            android:layout_marginStart="8dp"/>
    </LinearLayout>

</androidx.cardview.widget.CardView>

Fichier: app/src/main\res\layout\item_subcategory.xml
<TextView xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/subcategoryText"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:textSize="16sp"
    android:padding="10dp"
    android:textColor="@android:color/black"
    android:gravity="center"
    android:background="?android:attr/selectableItemBackground"/>

Fichier: app/src/main\res\mipmap-anydpi-v26\ic_launcher.xml
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

Fichier: app/src/main\res\mipmap-anydpi-v26\ic_launcher_round.xml
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

Fichier: app/src/main\res\raw\title.json
{ "1": "ÿßŸÑŸÇÿ±ÿ¢ŸÜ ÿßŸÑŸÉÿ±ŸäŸÖ ÿ®ÿ±ŸàÿßŸäÿ© Ÿàÿ±ÿ¥ ÿπŸÜ ŸÜÿßŸÅÿπ ",
  "2": "ÿßŸÑŸÅÿßÿ™ÿ≠ÿ© - ÿ≠ÿ≤ÿ® 1 - ÿ´ŸÖŸÜ",
  "3": "ÿßŸÑÿ®ŸÇÿ±ÿ© - ÿ≠ÿ≤ÿ® 1 - ÿ´ŸÖŸÜ",
  "482": "ÿßŸÑÿ≤ŸÑÿ≤ŸÑÿ©ÿå ÿßŸÑÿπÿßÿØŸäÿßÿ™ - ÿ≠ÿ≤ÿ® 60 - 3/4",
  "483": "ÿßŸÑŸÇÿßÿ±ÿπÿ©ÿå ÿßŸÑÿ™ŸÉÿßÿ´ÿ±ÿå ÿßŸÑÿπÿµÿ± - ÿ≠ÿ≤ÿ® 60 - 3/4",
  "484": "ÿßŸÑŸáŸÖÿ≤ÿ©ÿå ÿßŸÑŸÅŸäŸÑÿå ŸÇÿ±Ÿäÿ¥ - ÿ≠ÿ≤ÿ® 60 - 7/8",
  "485": "ÿßŸÑŸÖÿßÿπŸàŸÜÿå ÿßŸÑŸÉŸàÿ´ÿ±ÿå ÿßŸÑŸÉÿßŸÅÿ±ŸàŸÜÿå ÿßŸÑŸÜÿµÿ± - ÿ≠ÿ≤ÿ® 60 -   ",
  "486": "ÿßŸÑŸÖÿ≥ÿØÿå ÿßŸÑÿ•ÿÆŸÑÿßÿµÿå ÿßŸÑŸÅŸÑŸÇÿå ÿßŸÑŸÜÿßÿ≥ - ÿ≠ÿ≤ÿ® 60 -   "
}

Fichier: app/src/main\res\values\colors.xml
<resources>
    <color name="primary">#6200EE</color> <!-- Violet Material -->
    <color name="primaryVariant">#3700B3</color>
    <color name="secondary">#03DAC5</color> <!-- Bleu-vert -->
    <color name="secondaryVariant">#018786</color>
    <color name="background">#121212</color> <!-- Mode sombre -->
    <color name="surface">#1E1E1E</color>
    <color name="error">#CF6679</color>
    <color name="onPrimary">#FFFFFF</color>
    <color name="onSecondary">#000000</color>
    <color name="onBackground">#FFFFFF</color>
    <color name="onSurface">#FFFFFF</color>
</resources>

Fichier: app/src/main\res\values\strings.xml
<resources>
    <string name="app_name">Quran_Athman_Reader</string>
</resources>

Fichier: app/src/main\res\values\themes.xml
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.Quran_Athman_Reader" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your light theme here. -->
        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
    </style>

    <style name="Theme.Quran_Athman_Reader" parent="Base.Theme.Quran_Athman_Reader" />
</resources>

Fichier: app/src/main\res\values-night\themes.xml
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.Quran_Athman_Reader" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your dark theme here. -->
        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
    </style>
</resources>

Fichier: app/src/main\res\xml\backup_rules.xml
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

Fichier: app/src/main\res\xml\data_extraction_rules.xml
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

Fichier: app/src/test\java\com\example\quran_athman_reader\ExampleUnitTest.kt
package com.example.quran_athman_reader

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

